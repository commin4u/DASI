name: CI/CD PipelineMore actions

on:
  push: {}
  pull_request: {}
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: dasi-app
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        service: [auth, inventory, order]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle Cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew
        working-directory: ${{ matrix.service }}

      - name: Build and test ${{ matrix.service }}
        run: ./gradlew build --no-daemon --stacktrace --info
        working-directory: ${{ matrix.service }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-test-results
          path: ${{ matrix.service }}/build/test-results/**/*.xml

  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for Terraform directory
        id: check-infra
        run: |
          if [ ! -d "infrastructure/terraform" ]; then
            echo "::notice::No infrastructure/terraform directory found. Skipping Terraform steps."
            echo "skip_terraform=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::infrastructure/terraform directory found. Proceeding with Terraform."
            echo "skip_terraform=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Terraform
        if: steps.check-infra.outputs.skip_terraform != 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infrastructure/terraform fmt -check 

      - name: Terraform Init
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infrastructure/terraform init -input=false

      - name: Terraform Validate
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infrastructure/terraform validate 

      - name: Terraform Plan
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infrastructure/terraform plan -out=tfplan -input=false

      - name: Upload Terraform Plan
        if: steps.check-infra.outputs.skip_terraform != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infrastructure/terraform/tfplan 

      - name: Terraform Apply
        if: steps.check-infra.outputs.skip_terraform != 'true' && github.ref == 'refs/heads/main'
        run: terraform -chdir=infrastructure/terraform apply -auto-approve -input=false

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth, inventory, order]
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Normalize repository name to lowercase
        run: echo "REPO_LOWERCASE=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT || secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_REGISTRY/$REPO_LOWERCASE/${{ matrix.service }}-service:${{ github.sha }} ./${{ matrix.service }}

      - name: Tag Docker Image as latest
        run: |
          docker tag $DOCKER_REGISTRY/$REPO_LOWERCASE/${{ matrix.service }}-service:${{ github.sha }} \
                       $DOCKER_REGISTRY/$REPO_LOWERCASE/${{ matrix.service }}-service:latest

      - name: Push Docker Images
        run: |
          docker push $DOCKER_REGISTRY/$REPO_LOWERCASE/${{ matrix.service }}-service:${{ github.sha }}
          docker push $DOCKER_REGISTRY/$REPO_LOWERCASE/${{ matrix.service }}-service:latest