name: CI/CD Pipeline

on:
  push: {}
  pull_request: {}
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: dasi-app
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew
        working-directory: inventory

      - name: Run Tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: runner
          DB_PASSWORD: password
        run: ./gradlew test --info --stacktrace
        working-directory: inventory

      - name: Build Application
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: runner
          DB_PASSWORD: password
        run: ./gradlew build --info --stacktrace
        working-directory: inventory

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: inventory/build/test-results/**/*.xml

  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for infra directory
        id: check-infra
        run: |
          if [ ! -d "infra" ]; then
            echo "::notice::No infra/ directory found. Skipping Terraform steps."
            echo "skip_terraform=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::infra/ directory found. Proceeding with Terraform."
            echo "skip_terraform=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Terraform
        if: steps.check-infra.outputs.skip_terraform != 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infra fmt -check

      - name: Terraform Init
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infra init -input=false

      - name: Terraform Validate
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infra validate

      - name: Terraform Plan
        if: steps.check-infra.outputs.skip_terraform != 'true'
        run: terraform -chdir=infra plan -out=tfplan -input=false

      - name: Upload Terraform Plan
        if: steps.check-infra.outputs.skip_terraform != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/tfplan

      - name: Terraform Apply
        if: steps.check-infra.outputs.skip_terraform != 'true' && github.ref == 'refs/heads/main'
        run: terraform -chdir=infra apply -auto-approve -input=false

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Normalize repository name to lowercase
        run: echo "REPO_LOWERCASE=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT || secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t $DOCKER_REGISTRY/$REPO_LOWERCASE/$DOCKER_IMAGE_NAME:${{ github.sha }} inventory/

      - name: Tag Docker Image as latest
        run: |
          docker tag $DOCKER_REGISTRY/$REPO_LOWERCASE/$DOCKER_IMAGE_NAME:${{ github.sha }} \
                   $DOCKER_REGISTRY/$REPO_LOWERCASE/$DOCKER_IMAGE_NAME:latest

      - name: Push Docker Images
        run: |
          docker push $DOCKER_REGISTRY/$REPO_LOWERCASE/$DOCKER_IMAGE_NAME:${{ github.sha }}
          docker push $DOCKER_REGISTRY/$REPO_LOWERCASE/$DOCKER_IMAGE_NAME:latest